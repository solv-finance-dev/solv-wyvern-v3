{
  "language": "Solidity",
  "sources": {
    "contracts/WyvernAtomicizer.sol": {
      "content": "/*\n\n  << Wyvern Atomicizer >>\n\n  Execute multiple transactions, in order, atomically (if any fails, all revert).\n\n*/\n\npragma solidity 0.7.5;\n\n/**\n * @title WyvernAtomicizer\n * @author Wyvern Protocol Developers\n */\nlibrary WyvernAtomicizer {\n\n    function atomicize (address[] calldata addrs, uint[] calldata values, uint[] calldata calldataLengths, bytes calldata calldatas)\n        external\n    {\n        require(addrs.length == values.length && addrs.length == calldataLengths.length, \"Addresses, calldata lengths, and values must match in quantity\");\n\n        uint j = 0;\n        for (uint i = 0; i < addrs.length; i++) {\n            bytes memory cd = new bytes(calldataLengths[i]);\n            for (uint k = 0; k < calldataLengths[i]; k++) {\n                cd[k] = calldatas[j];\n                j++;\n            }\n            (bool success,) = addrs[i].call{value: values[i]}(cd);\n            require(success, \"Atomicizer subcall failed\");\n        }\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}